{"version":3,"sources":["TimeFormat.js","Time.js","App.js","serviceWorker.js","index.js"],"names":["TimeFormat","props","hours","minutes","seconds","Time","change","setState","pause","state","restart","time","milliseconds","conversion","Hour","Math","floor","Minutes","Seconds","setInterval","clearInterval","this","className","onClick","Component","ms","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAaeA,EATI,SAACC,GAChB,OACI,6BACA,4BAAKA,EAAMC,MAAM,GAAK,IAAID,EAAMC,MAAOD,EAAMC,MAA7C,MAAuDD,EAAME,QAAQ,GAAK,IAAIF,EAAME,QAASF,EAAME,QAAnG,MAA+GF,EAAMG,QAAQ,GAAK,IAAIH,EAAMG,QAASH,EAAMG,QAA3J,OCsDOC,EAzDf,YACI,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KAgBVK,OAAS,WACL,EAAKC,SAAS,CAACC,OAAQ,EAAKC,MAAMD,SAlBnB,EAoBnBE,QAAU,WACN,OACI,EAAKH,SAAS,CAACI,KAAM,EAAKV,MAAMW,gBAtBrB,EAyBnBC,WAAa,WAEL,IAAIC,EAAOC,KAAKC,MAAO,EAAKP,MAAME,KAAO,KAAW,IAChDM,EAAUF,KAAKC,MAAO,EAAKP,MAAME,KAAO,IAAS,IACjDO,EAAUH,KAAKC,MAAO,EAAKP,MAAME,KAAO,IAAQ,IAC1D,OACE,kBAAC,EAAD,CAAYT,MAAOY,EAAMX,QAASc,EAASb,QAASc,KA7BpD,EAAKT,MAAQ,CACTE,KAAM,EAAKV,MAAMW,aACjBJ,OAAO,GAJI,EADvB,iFAUyB,IAAD,OAChBW,aAAY,WACR,EAAKV,MAAMD,MACV,EAAKD,SAAS,CAACI,KAAM,EAAKF,MAAME,KAAO,OAAU,EAAKE,aAAgBO,cAAc,EAAKX,MAAME,QACjG,OAdX,+BAwCQ,OACI,6BACI,4BAAKU,KAAKR,cACV,yBAAKS,UAAU,SACZ,qCACA,uCACA,wCAEH,yBAAKA,UAAU,UACX,4BAAQC,QAASF,KAAKf,OAAOgB,UAAU,OAAOD,KAAKZ,MAAMD,MAAQ,QAAU,SAC3E,4BAAQe,QAASF,KAAKX,QAASY,UAAU,OAAzC,iBAlDpB,GAA0BE,aCApBC,EAAG,YASMC,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CAAMV,aAAca,MCINE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ab1200ed.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst TimeFormat = (props) => {\r\n    return(\r\n        <div>\r\n        <h1>{props.hours<10 ? '0'+props.hours: props.hours} : {props.minutes<10 ? '0'+props.minutes: props.minutes} : {props.seconds<10 ? '0'+props.seconds: props.seconds} </h1>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeFormat","import React, { Component } from 'react'\r\nimport TimeFormat from './TimeFormat'\r\n\r\n\r\nexport class Time extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            time: this.props.milliseconds,\r\n            pause: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.state.pause ? \r\n            (this.setState({time: this.state.time + 1000}) && this.conversion()) : clearInterval(this.state.time)\r\n        }, 1000);\r\n    }\r\n    \r\n    \r\n    change = () => {\r\n        this.setState({pause: !this.state.pause})\r\n    }\r\n    restart = () =>{\r\n        return (\r\n            this.setState({time: this.props.milliseconds})\r\n        )\r\n    }\r\n    conversion = () => {\r\n    \r\n            let Hour = Math.floor((this.state.time / 3600000) % 24);\r\n            let Minutes = Math.floor((this.state.time / 60000) % 60);\r\n            let Seconds = Math.floor((this.state.time / 1000) % 60);\r\n      return (\r\n        <TimeFormat hours={Hour} minutes={Minutes} seconds={Seconds}/>\r\n\r\n      )\r\n        \r\n    \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.conversion()}</h1>\r\n                <div className=\"title\">\r\n                   <h2>hours</h2>\r\n                   <h2>minutes</h2>\r\n                   <h2>seconds</h2>\r\n                </div>\r\n                <div className=\"button\">\r\n                    <button onClick={this.change}className=\"btn\">{this.state.pause ? 'Pause' : 'Start'}</button>\r\n                    <button onClick={this.restart} className=\"btn\">Restart</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;\r\n","import React from 'react';\nimport './App.css';\nimport Time from './Time'\n\nconst ms=35145698547\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Time milliseconds={ms} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}